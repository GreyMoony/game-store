// <auto-generated />
using System;
using GameStore.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameStore.DAL.Migrations
{
    [DbContext(typeof(GameStoreContext))]
    [Migration("20240919173157_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameStore.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.GameGenre", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("GenreId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.HasIndex("GenreId1");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.GamePlatform", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("PlatformId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(2);

                    b.Property<Guid?>("PlatformId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.HasIndex("PlatformId1");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("ParentGenreId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentGenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e73032c-05f4-49d1-985f-6515af85f71b"),
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = new Guid("03468375-68c6-4f92-9308-6eb2aa7e7326"),
                            Name = "RPG"
                        },
                        new
                        {
                            Id = new Guid("2cfc44f6-15c6-4aac-8f4e-ec2963b06ff1"),
                            Name = "Sports"
                        },
                        new
                        {
                            Id = new Guid("9199e424-d3fe-4f00-8b20-e73ebaabd14f"),
                            Name = "Action"
                        },
                        new
                        {
                            Id = new Guid("865685b9-eaa6-4ea9-8730-9cc62acd6e57"),
                            Name = "RTS",
                            ParentGenreId = new Guid("3e73032c-05f4-49d1-985f-6515af85f71b")
                        },
                        new
                        {
                            Id = new Guid("ccb60df7-c83b-4d51-a403-a907e51d8929"),
                            Name = "TBS",
                            ParentGenreId = new Guid("3e73032c-05f4-49d1-985f-6515af85f71b")
                        },
                        new
                        {
                            Id = new Guid("3e390490-0c39-4b7c-b3eb-1fcf00ae9eaf"),
                            Name = "Races",
                            ParentGenreId = new Guid("2cfc44f6-15c6-4aac-8f4e-ec2963b06ff1")
                        },
                        new
                        {
                            Id = new Guid("80d5f5a0-57c8-4a3d-93b1-62412e75fbff"),
                            Name = "Rally",
                            ParentGenreId = new Guid("3e390490-0c39-4b7c-b3eb-1fcf00ae9eaf")
                        },
                        new
                        {
                            Id = new Guid("1e7976f5-07c9-47ad-b3a2-7f663a95d37c"),
                            Name = "Arcade",
                            ParentGenreId = new Guid("3e390490-0c39-4b7c-b3eb-1fcf00ae9eaf")
                        },
                        new
                        {
                            Id = new Guid("bc8167de-4cde-47dd-8454-5dae6fd87e76"),
                            Name = "Formula",
                            ParentGenreId = new Guid("3e390490-0c39-4b7c-b3eb-1fcf00ae9eaf")
                        },
                        new
                        {
                            Id = new Guid("795f05d2-0a61-4f22-997d-ad30c29f5366"),
                            Name = "Off-road",
                            ParentGenreId = new Guid("3e390490-0c39-4b7c-b3eb-1fcf00ae9eaf")
                        },
                        new
                        {
                            Id = new Guid("76bf1cc9-8a37-454c-84d6-e8c089e379c7"),
                            Name = "FPS",
                            ParentGenreId = new Guid("9199e424-d3fe-4f00-8b20-e73ebaabd14f")
                        },
                        new
                        {
                            Id = new Guid("99e1e8f2-b9c1-4be4-9cea-d250a4904b8b"),
                            Name = "TPS",
                            ParentGenreId = new Guid("9199e424-d3fe-4f00-8b20-e73ebaabd14f")
                        },
                        new
                        {
                            Id = new Guid("f9394328-c6ab-4844-8904-f5e85989dd6b"),
                            Name = "Adventure",
                            ParentGenreId = new Guid("9199e424-d3fe-4f00-8b20-e73ebaabd14f")
                        },
                        new
                        {
                            Id = new Guid("ca98c625-fdcf-4cb0-a4be-ac737d7b108e"),
                            Name = "Puzzle & Skill"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Platform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique();

                    b.ToTable("Platforms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("553193a3-566e-4505-9eb2-5510eba25c95"),
                            Type = "Mobile"
                        },
                        new
                        {
                            Id = new Guid("3dac5ec8-be4d-4dfe-bd6d-d2805b55360e"),
                            Type = "Browser"
                        },
                        new
                        {
                            Id = new Guid("0b5a9586-69b5-408d-9e7d-cb455a7d7750"),
                            Type = "Desktop"
                        },
                        new
                        {
                            Id = new Guid("c9672bd2-61f9-4baf-8cd8-3d7190296e09"),
                            Type = "Console"
                        });
                });

            modelBuilder.Entity("GameStore.Domain.Entities.GameGenre", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Entities.Genre", null)
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId1");

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.GamePlatform", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Entities.Platform", "Platform")
                        .WithMany()
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameStore.Domain.Entities.Platform", null)
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId1");

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Genre", b =>
                {
                    b.HasOne("GameStore.Domain.Entities.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId");

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Game", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Genre", b =>
                {
                    b.Navigation("GameGenres");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("GameStore.Domain.Entities.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });
#pragma warning restore 612, 618
        }
    }
}
