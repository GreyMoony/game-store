name: Build and deploy ASP.Net Core app to an Azure Web App
# Назва workflow, яка відображається у GitHub Actions UI

env:
  AZURE_WEBAPP_NAME: game-store-web-api
  # Назва твого Azure Web App. Використовується в job deploy
  DOTNET_VERSION: '8.0.x'
  # Версія .NET, яка буде встановлена на GitHub runner
  PUBLISH_DIR: './publish'
  # Шлях, куди буде зберігатися опубліковане додаток

on:
  push:
    branches: [ "main" ]
  # workflow спрацьовує при пуші в main
  workflow_dispatch:
  # workflow можна запускати вручну

permissions:
  contents: read
  # Дозвіл workflow читати файли репозиторію

jobs:
  build:
    runs-on: ubuntu-latest
    # Використовуємо Ubuntu runner для збірки .NET

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        # Завантажуємо код репозиторію на runner

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
        # Встановлюємо потрібну версію .NET (8.0.x)

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
        # Кешуємо NuGet пакети, щоб збірка була швидшою. 
        # hashFiles забезпечує оновлення кешу при зміні packages.lock.json

      - name: Restore dependencies
        run: dotnet restore
        # Встановлює всі NuGet пакети, щоб build не падав через відсутні DLL

      - name: Build with dotnet
        run: dotnet build --configuration Release --no-restore
        # Збираємо проект у Release конфігурації. --no-restore, бо пакети вже відновили

      - name: Publish app
        run: dotnet publish -c Release -o ${{ env.PUBLISH_DIR }} --no-build
        # Публікуємо проект у папку PUBLISH_DIR
        # --no-build, бо build вже зробили, щоб уникнути повторної збірки
        # Всі потрібні DLL (включно з System.IdentityModel.Tokens.Jwt) будуть у цій папці

      - name: List publish directory
        run: ls -la ${{ env.PUBLISH_DIR }}


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dotnet-app
          path: ${{ env.PUBLISH_DIR }}
        # Завантажуємо папку publish як артефакт для deploy job

  deploy:
    runs-on: ubuntu-latest
    needs: build
    # deploy job почнеться тільки після успішного build
    environment:
      name: 'Development'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dotnet-app
        # Завантажуємо опубліковану папку з build job

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.PUBLISH_DIR }}
        # Деплоїмо додаток в Azure Web App
        # Вказуємо точну папку publish, щоб всі DLL були на сервері
